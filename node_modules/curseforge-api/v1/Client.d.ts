import CurseForgeFile from './File.js';
import CurseForgeGame from './Game.js';
import CurseForgeMod from './Mod.js';
import { CurseForgeGetCategoriesOptions, CurseForgeGetGamesOptions, CurseForgeGetMinecraftModLoadersOptions, CurseForgeGetMinecraftVersionsOptions, CurseForgeGetModDescriptionOptions, CurseForgeGetModFilesOptions, CurseForgeSearchModsOptions } from './Options.js';
import { CurseForgeFingerprintFuzzyMatchRaw, CurseForgeFingerprintMatchRaw, CurseForgeFingerprintsMatchesResult, CurseForgeGetFeaturedModsRequestBody, CurseForgeGetFuzzyMatchesRequestBody, CurseForgePagination } from './Types.js';
export type CurseForgeClass = typeof CurseForgeFile | typeof CurseForgeGame | typeof CurseForgeMod;
export type CurseForgeFetchQuery = Record<string, boolean | number | string>;
export interface NodeJSFetchOptions {
    body?: string | null;
    cache?: 'default' | 'force-cache' | 'no-cache' | 'no-store' | 'only-if-cached' | 'reload';
    credentials?: 'include' | 'omit' | 'same-origin';
    headers?: string[][] | Record<string, string>;
    integrity?: string;
    keepalive?: boolean;
    method?: string;
    mode?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
    redirect?: 'error' | 'follow' | 'manual';
    referrer?: string;
    referrerPolicy?: '' | 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url';
    signal?: AbortSignal | null;
}
export interface CurseForgeFetchOptions extends NodeJSFetchOptions {
    query?: CurseForgeFetchQuery;
}
export interface CurseForgeResponseErrorOptions {
    path: string;
    status: number;
    statusText: string;
}
export declare class CurseForgeResponseError extends Error {
    path: string;
    status: number;
    statusText: string;
    constructor({ path, status, statusText }: CurseForgeResponseErrorOptions);
}
export interface CurseForgeClientOptions {
    fetch?: (...args: any[]) => Promise<any>;
}
export interface CurseForgePaginatedResponse<T> {
    pagination: CurseForgePagination;
    data: T[];
}
export interface CurseForgeFeaturedMods {
    featured: CurseForgeMod[];
    popular: CurseForgeMod[];
    recentlyUpdated: CurseForgeMod[];
}
export interface CurseForgeFingerprintMatch extends Omit<CurseForgeFingerprintMatchRaw, 'file' | 'latestFiles'> {
    file: CurseForgeFile;
    latestFiles: CurseForgeFile[];
}
export interface CurseForgeFingerprintsMatches extends Omit<CurseForgeFingerprintsMatchesResult, 'exactMatches' | 'partialMatches'> {
    exactMatches: CurseForgeFingerprintMatch[];
    partialMatches: CurseForgeFingerprintMatch[];
}
export interface CurseForgeFingerprintFuzzyMatch extends Omit<CurseForgeFingerprintFuzzyMatchRaw, 'file' | 'latestFiles'> {
    file: CurseForgeFile;
    latestFiles: CurseForgeFile[];
}
export default class CurseForgeClient {
    #private;
    constructor(apiKey: string, options?: CurseForgeClientOptions);
    fetchUrl(path: string, options?: CurseForgeFetchOptions): Promise<Record<string, any>>;
    getGames(options?: CurseForgeGetGamesOptions): Promise<CurseForgePaginatedResponse<CurseForgeGame>>;
    getGame(gameId: number): Promise<CurseForgeGame>;
    getVersions(gameId: number): Promise<import("./Types.js").CurseForgeGameVersionsByType[]>;
    getVersionTypes(gameId: number): Promise<import("./Types.js").CurseForgeGameVersionType[]>;
    getCategories(gameId: number, options?: CurseForgeGetCategoriesOptions): Promise<import("./Types.js").CurseForgeCategory[]>;
    searchMods(gameId: number, options?: CurseForgeSearchModsOptions): Promise<CurseForgePaginatedResponse<CurseForgeMod>>;
    getMod(modId: number): Promise<CurseForgeMod>;
    getMods(modIds: number[]): Promise<CurseForgeMod[]>;
    getFeaturedMods(options: CurseForgeGetFeaturedModsRequestBody): Promise<CurseForgeFeaturedMods>;
    getModDescription(modId: number, options?: CurseForgeGetModDescriptionOptions): Promise<string>;
    getModFile(modId: number, fileId: number): Promise<CurseForgeFile>;
    getModFiles(modId: number, options?: CurseForgeGetModFilesOptions): Promise<CurseForgePaginatedResponse<CurseForgeFile>>;
    getFiles(fileIds: number[]): Promise<CurseForgeFile[]>;
    getModFileChangelog(modId: number, fileId: number): Promise<string>;
    getModFileDownloadURL(modId: number, fileId: number): Promise<string>;
    getFingerprintsMatches(fingerprints: number[]): Promise<CurseForgeFingerprintsMatches>;
    getFingerprintsFuzzyMatches(options: CurseForgeGetFuzzyMatchesRequestBody): Promise<CurseForgeFingerprintFuzzyMatch[]>;
    getMinecraftVersions(options?: CurseForgeGetMinecraftVersionsOptions): Promise<import("./Types.js").CurseForgeMinecraftGameVersion[]>;
    getSpecificMinecraftVersion(gameVersionString: string): Promise<import("./Types.js").CurseForgeMinecraftGameVersion>;
    getMinecraftModLoaders(options?: CurseForgeGetMinecraftModLoadersOptions): Promise<import("./Types.js").CurseForgeMinecraftModLoaderIndex[]>;
    getSpecificMinecraftModLoader(modLoaderName: string): Promise<import("./Types.js").CurseForgeMinecraftModLoaderVersion>;
}
