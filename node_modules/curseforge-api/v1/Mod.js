import CurseForgeBase from './Base.js';
import CurseForgeFile from './File.js';
export default class CurseForgeMod extends CurseForgeBase {
    id;
    gameId;
    name;
    slug;
    links;
    summary;
    status;
    downloadCount;
    isFeatured;
    primaryCategoryId;
    categories;
    classId;
    authors;
    logo;
    screenshots;
    mainFileId;
    latestFiles;
    latestFilesIndexes;
    latestEarlyAccessFilesIndexes;
    dateCreated;
    dateModified;
    dateReleased;
    allowModDistribution;
    gamePopularityRank;
    isAvailable;
    thumbsUpCount;
    rating;
    constructor(client, data) {
        super(client);
        this.id = data.id;
        this.gameId = data.gameId;
        this.name = data.name;
        this.slug = data.slug;
        this.links = data.links;
        this.summary = data.summary;
        this.status = data.status;
        this.downloadCount = data.downloadCount;
        this.isFeatured = data.isFeatured;
        this.primaryCategoryId = data.primaryCategoryId;
        this.categories = data.categories;
        this.classId = data.classId;
        this.authors = data.authors;
        this.logo = data.logo;
        this.screenshots = data.screenshots;
        this.mainFileId = data.mainFileId;
        this.latestFiles = data.latestFiles.map((rawFile) => {
            return new CurseForgeFile(client, rawFile);
        });
        this.latestFilesIndexes = data.latestFilesIndexes;
        this.latestEarlyAccessFilesIndexes = data.latestEarlyAccessFilesIndexes;
        this.dateCreated = data.dateCreated;
        this.dateModified = data.dateModified;
        this.dateReleased = data.dateReleased;
        this.allowModDistribution = data.allowModDistribution;
        this.gamePopularityRank = data.gamePopularityRank;
        this.isAvailable = data.isAvailable;
        this.thumbsUpCount = data.thumbsUpCount;
        this.rating = data.rating;
    }
    getDescription(options) {
        return this.client.getModDescription(this.id, options);
    }
    getFile(fileId) {
        return this.client.getModFile(this.id, fileId);
    }
    getFiles(options) {
        return this.client.getModFiles(this.id, options);
    }
}
